-- Создание таблицы Role
--drop table Role;
drop table History;
drop table Queue;
drop table Cash_accounts;
drop table Users;


CREATE TABLE Role (
    Role_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name  VARCHAR2(100) NOT NULL,
    role_level NUMBER NOT NULL
);


-- Создание таблицы Users

CREATE TABLE Users (
    User_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    User_role NUMBER REFERENCES Role(Role_id),
    login VARCHAR2(100) UNIQUE NOT NULL,
    pass VARCHAR2(255) NOT NULL,
    user_name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    phone_number VARCHAR2(100) UNIQUE NOT NULL,
    pasport VARCHAR2(100) UNIQUE NOT NULL
);

--создание таблицы Currencies
CREATE TABLE Currencies (
    Currency_id VARCHAR2(4) PRIMARY KEY,  -- ID валюты, максимум 4 символа
    Currency_name VARCHAR2(100) NOT NULL,  -- Название валюты
    Exchange_rate NUMBER(10, 4) NOT NULL   -- Цена валюты, может быть дробной
);
-- Создание таблицы Cash_accounts

CREATE TABLE Cash_accounts (
    Cash_id VARCHAR2(100) PRIMARY KEY,
    Cash_owner NUMBER REFERENCES Users(User_id) NOT NULL,
    balance VARCHAR2(100) NOT NULL,
    Cash_name VARCHAR2(100) NOT NULL,
    IsBlocked NUMBER(1) DEFAULT 0,
    Creation_date DATE DEFAULT TRUNC(SYSDATE), 
    Currency_id VARCHAR2(4) REFERENCES Currencies(Currency_id) 
);




-- Создание таблицы History


CREATE TABLE History (
    Operation_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Transactor NUMBER REFERENCES Users(User_id),
    cash_from VARCHAR2(100) REFERENCES Cash_accounts(Cash_id), 
    cash_to VARCHAR2(100) REFERENCES Cash_accounts(Cash_id),    
    operation VARCHAR2(100),
    amount VARCHAR2(100),
    operation_description VARCHAR2(1000)
);

-- Создание таблицы Queue

CREATE TABLE Queue (
    Operation_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Transactor NUMBER REFERENCES Users(User_id),
    cash_from VARCHAR2(100) REFERENCES Cash_accounts(Cash_id), 
    cash_to VARCHAR2(100) REFERENCES Cash_accounts(Cash_id),    
    operation VARCHAR2(100),
    amount VARCHAR2(100),
    operation_description VARCHAR2(1000)
);






CREATE OR REPLACE TRIGGER trg_encrypt_user_data
BEFORE INSERT OR UPDATE ON Users
FOR EACH ROW
BEGIN
    IF :OLD.login IS NULL OR :OLD.login != :NEW.login THEN
        :NEW.login := EncryptData(:NEW.login);  -- Шифрование login
    END IF;

    IF :OLD.user_name IS NULL OR :OLD.user_name != :NEW.user_name THEN
        :NEW.user_name := EncryptData(:NEW.user_name);  -- Шифрование user_name
    END IF;

    IF :OLD.last_name IS NULL OR :OLD.last_name != :NEW.last_name THEN
        :NEW.last_name := EncryptData(:NEW.last_name);  -- Шифрование last_name
    END IF;

    IF :OLD.phone_number IS NULL OR :OLD.phone_number != :NEW.phone_number THEN
        :NEW.phone_number := EncryptData(:NEW.phone_number);  -- Шифрование phone_number
    END IF;
    IF :OLD.pasport IS NULL OR :OLD.pasport != :NEW.pasport THEN
        :NEW.pasport := EncryptData(:NEW.pasport);  -- Шифрование phone_number
    END IF;
END;
/





CREATE OR REPLACE TRIGGER trg_encrypt_cash_accounts
BEFORE INSERT OR UPDATE ON Cash_accounts
FOR EACH ROW
BEGIN
    IF :OLD.Cash_id IS NULL OR :OLD.Cash_id != :NEW.Cash_id THEN
            :NEW.Cash_id := EncryptCashId(:NEW.Cash_id);
    END IF;

    IF :OLD.balance IS NULL OR :OLD.balance != :NEW.balance THEN
           :NEW.balance := EncryptData(To_char(:NEW.balance)); -- Шифрование balance
    END IF;
    IF :OLD.Cash_name IS NULL OR :OLD.Cash_name != :NEW.Cash_name THEN
            :NEW.Cash_name := EncryptData(:NEW.Cash_name);      -- Шифрование Cash_name
    END IF;
END;
/




CREATE OR REPLACE TRIGGER trg_encrypt_history
BEFORE INSERT OR UPDATE ON History
FOR EACH ROW
BEGIN
    :NEW.cash_from := EncryptData(:NEW.cash_from);  -- Шифрование cash_from
    :NEW.cash_to := EncryptData(:NEW.cash_to);      -- Шифрование cash_to
    :NEW.operation := EncryptData(:NEW.operation);    -- Шифрование operation
    :NEW.amount := EncryptData(TO_CHAR(:NEW.amount)); -- Шифрование amount, преобразуем в строку
    :NEW.operation_description := EncryptData(:NEW.operation_description); -- Шифрование operation_description
END;
/
CREATE OR REPLACE TRIGGER trg_encrypt_history
BEFORE INSERT OR UPDATE ON History
FOR EACH ROW
BEGIN
    IF :OLD.cash_from IS NULL OR :OLD.cash_from != :NEW.cash_from THEN
        :NEW.cash_from := EncryptData(:NEW.cash_from);  -- Шифрование cash_from
    END IF;

    IF :OLD.cash_to IS NULL OR :OLD.cash_to != :NEW.cash_to THEN
        :NEW.cash_to := EncryptData(:NEW.cash_to);      -- Шифрование cash_to
    END IF;

    IF :OLD.operation IS NULL OR :OLD.operation != :NEW.operation THEN
        :NEW.operation := EncryptData(:NEW.operation);    -- Шифрование operation
    END IF;

    IF :OLD.amount IS NULL OR TO_CHAR(:OLD.amount) != TO_CHAR(:NEW.amount) THEN
        :NEW.amount := EncryptData(TO_CHAR(:NEW.amount)); -- Шифрование amount, преобразуем в строку
    END IF;

    IF :OLD.operation_description IS NULL OR :OLD.operation_description != :NEW.operation_description THEN
        :NEW.operation_description := EncryptData(:NEW.operation_description); -- Шифрование operation_description
    END IF;
END;
/



CREATE OR REPLACE TRIGGER trg_encrypt_Queue
BEFORE INSERT OR UPDATE ON Queue
FOR EACH ROW
BEGIN
    IF :OLD.cash_from IS NULL OR :OLD.cash_from != :NEW.cash_from THEN
        :NEW.cash_from := EncryptData(:NEW.cash_from);  -- Шифрование cash_from
    END IF;

    IF :OLD.cash_to IS NULL OR :OLD.cash_to != :NEW.cash_to THEN
        :NEW.cash_to := EncryptData(:NEW.cash_to);      -- Шифрование cash_to
    END IF;

    IF :OLD.operation IS NULL OR :OLD.operation != :NEW.operation THEN
        :NEW.operation := EncryptData(:NEW.operation);    -- Шифрование operation
    END IF;

    IF :OLD.amount IS NULL OR TO_CHAR(:OLD.amount) != TO_CHAR(:NEW.amount) THEN
        :NEW.amount := EncryptData(TO_CHAR(:NEW.amount)); -- Шифрование amount, преобразуем в строку
    END IF;

    IF :OLD.operation_description IS NULL OR :OLD.operation_description != :NEW.operation_description THEN
        :NEW.operation_description := EncryptData(:NEW.operation_description); -- Шифрование operation_description
    END IF;
END;
/

